#!/bin/bash
#
# pbrisbin 2011
#
# A mapping file at ~/.dotfiles_mapping will be used to determine what
# files get linked out of ~/.dotfiles/$file and into the required
# ~/$file location.
#
# Optionally, provide a second value on the line; when true, the file
# will also be linked into /root/$file. this requires a sudo binary be
# available to execute the linking as root and currently only works for
# top level dotfiles (.foo.rc, not .config/foo.rc).
#
# ---
# ###
# #
# # Example mapping file
# #
# # '#' provides expected comment behavior
# #
# ###
# .bashrc true # copies this one into /root too
# .htoprc
# .config/ncmpcpp
# ---
#
###

errorout() { echo "error: $*" >&2; exit 1; }

message()  { # {{{
  cat << EOF
  usage: dotfiles [ --pull ] [ --force ]

    --pull      pull from git before linking files

    --force     don't be shy about overwriting files

EOF

  exit 1
}
# }}}

refresh_git() { # {{{
  # repo already exists
  if [[ -d "$dotfiles/.git" ]]; then
    cd $dotfiles && git pull origin
    return
  fi

  # directory already exists but is not a repo
  if [[ -d "$dotfiles" ]]; then
    if $force; then
      rm -rf "$dotfiles"
    else
      errorout "$dotfiles exists, remove before pulling."
    fi
  fi

  # clone it
  git clone "$remote" "$dotfiles"
}
# }}}

link_file() { # {{{
  local src="$1" dst="$2" asroot="$3" dir

  if [[ -e "$dst" ]] && ! $force; then
    errorout "$dst exists, remove before linking"
  fi

  # todo: make this work for root
  if ! $asroot; then
    # make the dir if it doesn't exist yet
    dir="${dst%/*}"; [[ -d "$dir" ]] || mkdir -p "$dir"
  fi

  echo "linking ${src/$HOME/~} --> ${dst/$HOME/~}"
  $asroot && sudo ln -s -f "$src" "$dst" || ln -s -f "$src" "$dst"
}
# }}}

disperse() { # {{{
  local src

  [[ -f "$mapping" ]] || errorout "dotfiles mapping not found"

  while read -r file root; do
    src="$dotfiles/$file"

    [[ -e "$src" ]] || continue # silently skip

    link_file "$src" "$HOME/$file" false

    if [[ -n "$root" ]] && $root; then
      link_file "$src" "/root/$file" true
    fi
  done < <(sed '/^$/d;/^#.*$/d;s/#.*$//g' "$mapping") # strip comments
}
# }}}

pull=false
force=false

remote='git://github.com/localizator/dotfiles.git'
dotfiles="$HOME/.dotfiles"
mapping="$HOME/.dotfiles_mapping"

while [[ -n "$1" ]]; do
  case "$1" in
    --pull)  pull=true  ;;
    --force) force=true ;;
    *)       message    ;;
  esac
  shift
done

$pull && refresh_git

disperse